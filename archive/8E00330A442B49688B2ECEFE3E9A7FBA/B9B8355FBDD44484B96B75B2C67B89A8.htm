
<!doctype html>
<html>
<head>
<meta charset="utf-8">
<meta name="description" content=""> 
<meta name="keywords" content="">
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE9">
<title>Git 分支.note</title>
<link rel="stylesheet" href="../../static/css/style.css">
</head>
<body>  
    <div class="doc" id="doc">
        <div class="header" id="header">
            <div class="logo"><a href="../../index.html" title="note2site" target="_self">note2site</a></div>
            <div class="links">
                <a href="https://github.com/likebeta/note2site">github</a>
            </div>
        </div>
        <div class="content" id="content">
            <div class="mod-left-side public-page" id="mod-left-side">
                <div class="mod-tree" id="mod-tree">
                    <div class="tree-wrap">
                        <div class="t-trunk">
                            <div class="t-branch">
                                <div class="t-panel">
                                    <div class="t-title note-title-block has-children expanded" id="my-note-area">
                                        <em>likebeta的共享笔记</em>
                                    </div>
                                    <ul class="t-folder note-content-block" id="categories" style="display:block;">
                                        <li>
                                            <div class="public-notes">
                                                <ul class="t-folder" style="display:block;" id="public-notes-con">
                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="life" href="/topic/0A45DFB25EC64A30997B9E30AEBC5661.htm">
                                                                <em class="txt">life</em>
                                                                <em class="num">(1)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="系统收藏" href="/topic/1f1f950cd331e95e7752e52027f0ec83.htm">
                                                                <em class="txt">系统收藏</em>
                                                                <em class="num">(1)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="微信收藏" href="/topic/2972DBC640DD44CB8605DAF46B52FBD4.htm">
                                                                <em class="txt">微信收藏</em>
                                                                <em class="num">(2)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="note2site" href="/topic/52C15BCC8FF941278249D2ADD8AC2B14.htm">
                                                                <em class="txt">note2site</em>
                                                                <em class="num">(1)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="调研" href="/topic/60B8AC9FD8864FBDB4715B1D67F0DD2A.htm">
                                                                <em class="txt">调研</em>
                                                                <em class="num">(2)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="读书笔记" href="/topic/6C1BCD692A7F4DB8849B6A466D275B14.htm">
                                                                <em class="txt">读书笔记</em>
                                                                <em class="num">(2)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title selected note-default-cate">
                                                            <a class="t-folder-icon" title="网文快捕" href="/topic/8E00330A442B49688B2ECEFE3E9A7FBA.htm">
                                                                <em class="txt">网文快捕</em>
                                                                <em class="num">(10)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="幽默" href="/topic/A8CD5F8E4625440592092A8E388729E4.htm">
                                                                <em class="txt">幽默</em>
                                                                <em class="num">(1)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="娱乐" href="/topic/B1D1A63E1E9B4186A70AF54B2C1365F6.htm">
                                                                <em class="txt">娱乐</em>
                                                                <em class="num">(8)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="来自网页剪报" href="/topic/B4E26D4400C742C183BEDB73CE419F6C.htm">
                                                                <em class="txt">来自网页剪报</em>
                                                                <em class="num">(1)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="语文" href="/topic/D39F0297644C451F8849CD5E735E6968.htm">
                                                                <em class="txt">语文</em>
                                                                <em class="num">(10)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="website" href="/topic/FBDEA12F8A01488499E0CCCEF8B2B34B.htm">
                                                                <em class="txt">website</em>
                                                                <em class="num">(11)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                    <li class="t-cate">
                                                        <div class="t-title">
                                                            <a class="t-folder-icon" title="来自手机" href="/topic/bdaf4c9b6c117fb8d796da808ab6ef4c_2.htm">
                                                                <em class="txt">来自手机</em>
                                                                <em class="num">(1)</em>
                                                            </a>
                                                        </div>
                                                    </li>													                                                </ul>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mod-public-ads"></div>
            <div class="mod-right-side public-page" id="mod-right-side">
                <div class="mod-main" id="mod-main">
                    <div class="main-wrap" id="main-wrap" style="margin-top:10px;">
                        <div class="right-top-wrap" id="right-top-wrap">
                            <div class="mod-note-title publicpage">
                                <h2>Git 分支.note</h2>
                             </div>
                        </div>
                        <div class="mod-note-body publicpage-note-preview" id="note-list-wrap" style="top:50px;overflow-y:auto">
                            <div class="note-info hide" id="note-info">
                                <p class="detail-line time-line">
                                    <em class="create-time"><em class="label">创建时间：</em>1361359122</em>
                                    <em class="modify-time">修改时间： 1540200668</em>
                                </p>        
                            </div>
                            <div class="inote-editor mod-note-content" id="mod-note-content" height="100%">
                                <div id="note-content-wrap" style="font:16px/1.5 宋体">
                                    <?xml version="1.0"?>
<note xmlns="http://note.youdao.com" schema-version="1.0.3" file-version="0"><head><list id="5956-1540200666290" type="unordered"/></head><body><list-item level="1" list-id="5956-1540200666290"><coId>4462-1540200666291</coId><text> Git 分支</text><inline-styles><font-family><from>0</from><to>7</to><value>SimSun</value></font-family><font-size><from>0</from><to>7</to><value>12</value></font-size><color><from>1</from><to>7</to><value>#0000ff</value></color><href><from>1</from><to>7</to><value>http://www.uml.org.cn/pzgl/201107274.asp#1</value></href></inline-styles><styles/></list-item><list-item level="1" list-id="5956-1540200666290"><coId>4828-1540200666292</coId><text>何谓分支</text><inline-styles><font-family><from>0</from><to>4</to><value>SimSun</value></font-family><font-size><from>0</from><to>4</to><value>12</value></font-size><color><from>0</from><to>4</to><value>#0000ff</value></color><href><from>0</from><to>4</to><value>http://www.uml.org.cn/pzgl/201107274.asp#2</value></href></inline-styles><styles/></list-item><list-item level="1" list-id="5956-1540200666290"><coId>0085-1540200666293</coId><text>分支的新建与合并</text><inline-styles><font-family><from>0</from><to>8</to><value>SimSun</value></font-family><font-size><from>0</from><to>8</to><value>12</value></font-size><color><from>0</from><to>8</to><value>#0000ff</value></color><href><from>0</from><to>8</to><value>http://www.uml.org.cn/pzgl/201107274.asp#3</value></href></inline-styles><styles/></list-item><list-item level="1" list-id="5956-1540200666290"><coId>7589-1540200666294</coId><text>分支的管理</text><inline-styles><font-family><from>0</from><to>5</to><value>SimSun</value></font-family><font-size><from>0</from><to>5</to><value>12</value></font-size><color><from>0</from><to>5</to><value>#0000ff</value></color><href><from>0</from><to>5</to><value>http://www.uml.org.cn/pzgl/201107274.asp#4</value></href></inline-styles><styles/></list-item><list-item level="1" list-id="5956-1540200666290"><coId>3133-1540200666294</coId><text>利用分支进行开发的工作流程</text><inline-styles><font-family><from>0</from><to>13</to><value>SimSun</value></font-family><font-size><from>0</from><to>13</to><value>12</value></font-size><color><from>0</from><to>13</to><value>#0000ff</value></color><href><from>0</from><to>13</to><value>http://www.uml.org.cn/pzgl/201107274.asp#5</value></href></inline-styles><styles/></list-item><list-item level="1" list-id="5956-1540200666290"><coId>4560-1540200666295</coId><text>远程分支</text><inline-styles><font-family><from>0</from><to>4</to><value>SimSun</value></font-family><font-size><from>0</from><to>4</to><value>12</value></font-size><color><from>0</from><to>4</to><value>#0000ff</value></color><href><from>0</from><to>4</to><value>http://www.uml.org.cn/pzgl/201107274.asp#6</value></href></inline-styles><styles/></list-item><list-item level="1" list-id="5956-1540200666290"><coId>3249-1540200666296</coId><text>分支的衍合</text><inline-styles><font-family><from>0</from><to>5</to><value>SimSun</value></font-family><font-size><from>0</from><to>5</to><value>12</value></font-size><color><from>0</from><to>5</to><value>#0000ff</value></color><href><from>0</from><to>5</to><value>http://www.uml.org.cn/pzgl/201107274.asp#7</value></href></inline-styles><styles/></list-item><list-item level="1" list-id="5956-1540200666290"><coId>6032-1540200666296</coId><text>小结</text><inline-styles><font-family><from>0</from><to>2</to><value>SimSun</value></font-family><font-size><from>0</from><to>2</to><value>12</value></font-size><color><from>0</from><to>2</to><value>#0000ff</value></color><href><from>0</from><to>2</to><value>http://www.uml.org.cn/pzgl/201107274.asp#8</value></href></inline-styles><styles/></list-item><para><coId>6683-1540200666297</coId><text>Git 分支 </text><inline-styles><bold><from>0</from><to>7</to><value>true</value></bold><font-family><from>0</from><to>7</to><value>SimSun</value></font-family><font-size><from>0</from><to>7</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4514-1540200666298</coId><text>                        </text><inline-styles/><styles/></para><para><coId>3548-1540200666297</coId><text>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。在很多版本控制系统中，这是个昂贵的过程，常常需要创建一个源代码目录的完整副本，对大型项目来说会花费很长时间。</text><inline-styles><font-family><from>0</from><to>113</to><value>SimSun</value></font-family><font-size><from>0</from><to>113</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7775-1540200666300</coId><text>有人把 Git 的分支模型称为“必杀技特性”，而正是因为它，将 Git                           从版本控制系统家族里区分出来。Git 有何特别之处呢？Git 的分支可谓是难以置信的轻量级，它的新建操作几乎可以在瞬间完成，并且在不同分支间切换起来也差不多一样快。和许多其他版本控制系统不同，Git                           鼓励在工作流程中频繁使用分支与合并，哪怕一天之内进行许多次都没有关系。理解分支的概念并熟练运用后，你才会意识到为什么                           Git 是一个如此强大而独特的工具，并从此真正改变你的开发方式。</text><inline-styles><font-family><from>0</from><to>305</to><value>SimSun</value></font-family><font-size><from>0</from><to>305</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5697-1540200666303</coId><text>何谓分支 </text><inline-styles><bold><from>0</from><to>5</to><value>true</value></bold><font-family><from>0</from><to>5</to><value>SimSun</value></font-family><font-size><from>0</from><to>5</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1430-1540200666305</coId><text>                        </text><inline-styles/><styles/></para><para><coId>3560-1540200666304</coId><text>为了理解 Git 分支的实现方式，我们需要回顾一下 Git 是如何储存数据的。或许你还记得第一章的内容，Git                           保存的不是文件差异或者变化量，而只是一系列文件快照。</text><inline-styles><font-family><from>0</from><to>108</to><value>SimSun</value></font-family><font-size><from>0</from><to>108</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1754-1540200666305</coId><text>在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。</text><inline-styles><font-family><from>0</from><to>131</to><value>SimSun</value></font-family><font-size><from>0</from><to>131</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8044-1540200666306</coId><text>为直观起见，我们假设在工作目录中有三个文件，准备将它们暂存后提交。暂存操作会对每一个文件计算校验和（即第一章中提到的                  SHA-1 哈希字串），然后把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 类型的对象存储这些快照），并将校验和加入暂存区域：</text><inline-styles><font-family><from>0</from><to>149</to><value>SimSun</value></font-family><font-size><from>0</from><to>149</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1269-1540200666307</coId><text>$ git add README test.rb LICENSE</text><inline-styles><font-family><from>0</from><to>32</to><value>SimSun</value></font-family><font-size><from>0</from><to>32</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8033-1540200666307</coId><text>$ git commit -m 'initial commit of my                           project'当使用 git commit 新建一个提交对象前，Git 会先计算每一个子目录（本例中就是项目根目录）的校验和，然后在                           Git 仓库中将这些目录保存为树（tree）对象。之后 Git 创建的提交对象，除了包含相关提交信息以外，还包含着指向这个树对象（项目根目录）的指针，如此它就可以在将来需要的时候，重现此次快照的内容了。</text><inline-styles><font-family><from>0</from><to>259</to><value>SimSun</value></font-family><font-size><from>0</from><to>259</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4734-1540200666309</coId><text>现在，Git 仓库中有五个对象：三个表示文件快照内容的 blob 对象；一个记录着目录树内容及其中各个文件对应                           blob 对象索引的 tree 对象；以及一个包含指向 tree 对象（根目录）的索引和其他提交信息元数据的                           commit 对象。概念上来说，仓库中的各个对象保存的数据和相互关系看起来如图 3-1 所示：</text><inline-styles><font-family><from>0</from><to>210</to><value>SimSun</value></font-family><font-size><from>0</from><to>210</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>2152-1540200666310</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>5619-1540200666310</coId><text>图 3-1. 单个提交对象在仓库中的数据结构</text><inline-styles><font-family><from>0</from><to>22</to><value>SimSun</value></font-family><font-size><from>0</from><to>22</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4498-1540200666311</coId><text>作些修改后再次提交，那么这次的提交对象会包含一个指向上次提交对象的指针（译注：即下图中的                           parent 对象）。两次提交后，仓库历史会变成图 3-2 的样子：</text><inline-styles><font-family><from>0</from><to>105</to><value>SimSun</value></font-family><font-size><from>0</from><to>105</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>4780-1540200666312</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>7239-1540200666312</coId><text>图 3-2. 多个提交对象之间的链接关系</text><inline-styles><font-family><from>0</from><to>20</to><value>SimSun</value></font-family><font-size><from>0</from><to>20</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8030-1540200666312</coId><text>现在来谈分支。Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。Git                           会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次提交对象的 master                           分支，它在每次提交的时候都会自动向前移动。</text><inline-styles><font-family><from>0</from><to>177</to><value>SimSun</value></font-family><font-size><from>0</from><to>177</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>8738-1540200666313</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>1168-1540200666314</coId><text>图 3-3. 分支其实就是从某个提交对象往回看的历史</text><inline-styles><font-family><from>0</from><to>26</to><value>SimSun</value></font-family><font-size><from>0</from><to>26</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6120-1540200666316</coId><text>那么，Git 又是如何创建一个新的分支的呢？答案很简单，创建一个新的分支指针。比如新建一个                           testing 分支，可以使用 git branch 命令：</text><inline-styles><font-family><from>0</from><to>102</to><value>SimSun</value></font-family><font-size><from>0</from><to>102</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6967-1540200666317</coId><text>$ git branch testing这会在当前 commit 对象上新建一个分支指针（见图                           3-4）。</text><inline-styles><font-family><from>0</from><to>79</to><value>SimSun</value></font-family><font-size><from>0</from><to>79</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>9858-1540200666319</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>445</width></styles></image><para><coId>7676-1540200666319</coId><text>图 3-4. 多个分支指向提交数据的历史</text><inline-styles><font-family><from>0</from><to>20</to><value>SimSun</value></font-family><font-size><from>0</from><to>20</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3119-1540200666320</coId><text>那么，Git 是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为                           HEAD 的特别指针。请注意它和你熟知的许多其他版本控制系统（比如 Subversion 或 CVS）里的                           HEAD 概念大不相同。在 Git 中，它是一个指向你正在工作中的本地分支的指针（译注：将 HEAD 想象为当前分支的别名。）。运行                           git branch 命令，仅仅是建立了一个新的分支，但不会自动切换到这个分支中去，所以在这个例子中，我们依然还在                           master 分支里工作（参考图 3-5）。</text><inline-styles><font-family><from>0</from><to>349</to><value>SimSun</value></font-family><font-size><from>0</from><to>349</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>3939-1540200666323</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>445</width></styles></image><para><coId>3230-1540200666324</coId><text>图 3-5. HEAD 指向当前所在的分支</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6188-1540200666325</coId><text>要切换到其他分支，可以执行 git checkout 命令。我们现在转换到新建的                           testing 分支：</text><inline-styles><font-family><from>0</from><to>78</to><value>SimSun</value></font-family><font-size><from>0</from><to>78</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9857-1540200666326</coId><text>$ git checkout testing这样 HEAD 就指向了 testing                           分支（见图3-6）。</text><inline-styles><font-family><from>0</from><to>79</to><value>SimSun</value></font-family><font-size><from>0</from><to>79</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>6516-1540200666326</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>392</width></styles></image><para><coId>5230-1540200666327</coId><text>图 3-6. HEAD 在你转换分支时指向新的分支</text><inline-styles><font-family><from>0</from><to>25</to><value>SimSun</value></font-family><font-size><from>0</from><to>25</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2779-1540200666327</coId><text>这样的实现方式会给我们带来什么好处呢？好吧，现在不妨再提交一次：</text><inline-styles><font-family><from>0</from><to>32</to><value>SimSun</value></font-family><font-size><from>0</from><to>32</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3052-1540200666327</coId><text>$ vim test.rb</text><inline-styles><font-family><from>0</from><to>13</to><value>SimSun</value></font-family><font-size><from>0</from><to>13</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2390-1540200666328</coId><text>$ git commit -a -m 'made a change'图                           3-7 展示了提交后的结果。</text><inline-styles><font-family><from>0</from><to>76</to><value>SimSun</value></font-family><font-size><from>0</from><to>76</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>6125-1540200666329</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>7682-1540200666329</coId><text>图 3-7. 每次提交后 HEAD 随着分支一起向前移动</text><inline-styles><font-family><from>0</from><to>28</to><value>SimSun</value></font-family><font-size><from>0</from><to>28</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7825-1540200666330</coId><text>非常有趣，现在 testing 分支向前移动了一格，而 master 分支仍然指向原先                           git checkout 时所在的 commit 对象。现在我们回到 master 分支看看：</text><inline-styles><font-family><from>0</from><to>117</to><value>SimSun</value></font-family><font-size><from>0</from><to>117</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3598-1540200666330</coId><text>$ git checkout master图 3-8 显示了结果。</text><inline-styles><font-family><from>0</from><to>33</to><value>SimSun</value></font-family><font-size><from>0</from><to>33</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>4879-1540200666331</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>6546-1540200666331</coId><text>图 3-8. HEAD 在一次 checkout 之后移动到了另一个分支</text><inline-styles><font-family><from>0</from><to>36</to><value>SimSun</value></font-family><font-size><from>0</from><to>36</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3848-1540200666332</coId><text>这条命令做了两件事。它把 HEAD 指针移回到 master 分支，并把工作目录中的文件换成了                           master 分支所指向的快照内容。也就是说，现在开始所做的改动，将始于本项目中一个较老的版本。它的主要作用是将                           testing 分支里作出的修改暂时取消，这样你就可以向另一个方向进行开发。</text><inline-styles><font-family><from>0</from><to>195</to><value>SimSun</value></font-family><font-size><from>0</from><to>195</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8817-1540200666333</coId><text>我们作些修改后再次提交：</text><inline-styles><font-family><from>0</from><to>12</to><value>SimSun</value></font-family><font-size><from>0</from><to>12</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2945-1540200666333</coId><text>$ vim test.rb</text><inline-styles><font-family><from>0</from><to>13</to><value>SimSun</value></font-family><font-size><from>0</from><to>13</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6650-1540200666333</coId><text>$ git commit -a -m 'made other changes'现在我们的项目提交历史产生了分叉（如图                           3-9 所示），因为刚才我们创建了一个分支，转换到其中进行了一些工作，然后又回到原来的主分支进行了另外一些工作。这些改变分别孤立在不同的分支里：我们可以在不同分支里反复切换，并在时机成熟时把它们合并到一起。而所有这些工作，仅仅需要                           branch 和 checkout 这两条命令就可以完成。</text><inline-styles><font-family><from>0</from><to>256</to><value>SimSun</value></font-family><font-size><from>0</from><to>256</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>2010-1540200666335</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>1669-1540200666335</coId><text>图 3-9. 不同流向的分支历史</text><inline-styles><font-family><from>0</from><to>16</to><value>SimSun</value></font-family><font-size><from>0</from><to>16</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7345-1540200666336</coId><text>由于 Git 中的分支实际上仅是一个包含所指对象校验和（40 个字符长度                           SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件写入                           41 个字节（外加一个换行符）那么简单，当然也就很快了。</text><inline-styles><font-family><from>0</from><to>169</to><value>SimSun</value></font-family><font-size><from>0</from><to>169</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>0013-1540200666337</coId><text>这和大多数版本控制系统形成了鲜明对比，它们管理分支大多采取备份所有项目文件到特定目录的方式，所以根据项目文件数量和大小不同，可能花费的时间也会有相当大的差别，快则几秒，慢则数分钟。而                           Git 的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创建和切换。同时，因为每次提交时都记录了祖先信息（译注：即                           parent 对象），将来要合并分支时，寻找恰当的合并基础（译注：即共同祖先）的工作其实已经自然而然地摆在那里了，所以实现起来非常容易。Git                           鼓励开发者频繁使用分支，正是因为有着这些特性作保障。</text><inline-styles><font-family><from>0</from><to>332</to><value>SimSun</value></font-family><font-size><from>0</from><to>332</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5540-1540200666339</coId><text>接下来看看，我们为什么应该频繁使用分支。</text><inline-styles><font-family><from>0</from><to>20</to><value>SimSun</value></font-family><font-size><from>0</from><to>20</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4013-1540200666339</coId><text>分支的新建与合并 </text><inline-styles><bold><from>0</from><to>9</to><value>true</value></bold><font-family><from>0</from><to>9</to><value>SimSun</value></font-family><font-size><from>0</from><to>9</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2030-1540200666340</coId><text>                        </text><inline-styles/><styles/></para><para><coId>6220-1540200666340</coId><text>现在让我们来看一个简单的分支与合并的例子，实际工作中大体也会用到这样的工作流程：</text><inline-styles><font-family><from>0</from><to>40</to><value>SimSun</value></font-family><font-size><from>0</from><to>40</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8088-1540200666340</coId><text>1. 开发某个网站。</text><inline-styles><font-family><from>0</from><to>10</to><value>SimSun</value></font-family><font-size><from>0</from><to>10</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7470-1540200666340</coId><text> 2. 为实现某个新的需求，创建一个分支。 </text><inline-styles><font-family><from>0</from><to>22</to><value>SimSun</value></font-family><font-size><from>0</from><to>22</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1080-1540200666341</coId><text>3. 在这个分支上开展工作。</text><inline-styles><font-family><from>0</from><to>14</to><value>SimSun</value></font-family><font-size><from>0</from><to>14</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6229-1540200666341</coId><text>假设此时，你突然接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：</text><inline-styles><font-family><from>0</from><to>44</to><value>SimSun</value></font-family><font-size><from>0</from><to>44</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1555-1540200666341</coId><text>1. 返回到原先已经发布到生产服务器上的分支。</text><inline-styles><font-family><from>0</from><to>23</to><value>SimSun</value></font-family><font-size><from>0</from><to>23</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1525-1540200666342</coId><text> 2. 为这次紧急修补建立一个新分支，并在其中修复问题。</text><inline-styles><font-family><from>0</from><to>28</to><value>SimSun</value></font-family><font-size><from>0</from><to>28</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4573-1540200666342</coId><text> 3. 通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。</text><inline-styles><font-family><from>0</from><to>46</to><value>SimSun</value></font-family><font-size><from>0</from><to>46</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1043-1540200666343</coId><text> 4. 切换到之前实现新需求的分支，继续工作。</text><inline-styles><font-family><from>0</from><to>23</to><value>SimSun</value></font-family><font-size><from>0</from><to>23</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4310-1540200666344</coId><text>分支的新建与切换</text><inline-styles><font-family><from>0</from><to>8</to><value>SimSun</value></font-family><font-size><from>0</from><to>8</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5450-1540200666344</coId><text>首先，我们假设你正在项目中愉快地工作，并且已经提交了几次更新（见图 3-10）。</text><inline-styles><font-family><from>0</from><to>40</to><value>SimSun</value></font-family><font-size><from>0</from><to>40</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>7655-1540200666345</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>229</width></styles></image><para><coId>4250-1540200666345</coId><text>图 3-10. 一个简短的提交历史</text><inline-styles><font-family><from>0</from><to>17</to><value>SimSun</value></font-family><font-size><from>0</from><to>17</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6841-1540200666345</coId><text>现在，你决定要修补问题追踪系统上的 #53 问题。顺带说明下，Git 并不同任何特定的问题追踪系统打交道。这里为了说明要解决的问题，才把新建的分支取名为                           iss53。要新建并切换到该分支，运行 git checkout 并加上 -b 参数：</text><inline-styles><font-family><from>0</from><to>146</to><value>SimSun</value></font-family><font-size><from>0</from><to>146</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2223-1540200666346</coId><text>$ git checkout -b iss53</text><inline-styles><font-family><from>0</from><to>23</to><value>SimSun</value></font-family><font-size><from>0</from><to>23</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7078-1540200666346</coId><text>Switched to a new branch "iss53"这相当于执行下面这两条命令：</text><inline-styles><font-family><from>0</from><to>46</to><value>SimSun</value></font-family><font-size><from>0</from><to>46</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8348-1540200666347</coId><text>$ git branch iss53</text><inline-styles><font-family><from>0</from><to>18</to><value>SimSun</value></font-family><font-size><from>0</from><to>18</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2660-1540200666347</coId><text>$ git checkout iss53图 3-11 示意该命令的执行结果。</text><inline-styles><font-family><from>0</from><to>38</to><value>SimSun</value></font-family><font-size><from>0</from><to>38</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>1787-1540200666348</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>229</width></styles></image><para><coId>1977-1540200666348</coId><text>图 3-11. 创建了一个新分支的指针</text><inline-styles><font-family><from>0</from><to>19</to><value>SimSun</value></font-family><font-size><from>0</from><to>19</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9640-1540200666348</coId><text>接着你开始尝试修复问题，在提交了若干次更新后，iss53 分支的指针也会随着向前推进，因为它就是当前分支（换句话说，当前的                  HEAD 指针正指向 iss53，见图 3-12）：</text><inline-styles><font-family><from>0</from><to>105</to><value>SimSun</value></font-family><font-size><from>0</from><to>105</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7128-1540200666349</coId><text>$ vim index.html</text><inline-styles><font-family><from>0</from><to>16</to><value>SimSun</value></font-family><font-size><from>0</from><to>16</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8973-1540200666349</coId><text>$ git commit -a -m 'added a new footer                           [issue 53]'</text><inline-styles><font-family><from>0</from><to>76</to><value>SimSun</value></font-family><font-size><from>0</from><to>76</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>8619-1540200666350</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>309</width></styles></image><para><coId>2552-1540200666350</coId><text>图 3-12. iss53 分支随工作进展向前推进</text><inline-styles><font-family><from>0</from><to>25</to><value>SimSun</value></font-family><font-size><from>0</from><to>25</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2744-1540200666351</coId><text>现在你就接到了那个网站问题的紧急电话，需要马上修补。有了 Git ，我们就不需要同时发布这个补丁和                           iss53 里作出的修改，也不需要在创建和发布该补丁到服务器之前花费大力气来复原这些修改。唯一需要的仅仅是切换回                           master 分支。</text><inline-styles><font-family><from>0</from><to>169</to><value>SimSun</value></font-family><font-size><from>0</from><to>169</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1999-1540200666352</coId><text>不过在此之前，留心你的暂存区或者工作目录里，那些还没有提交的修改，它会和你即将检出的分支产生冲突从而阻止                           Git 为你切换分支。切换分支的时候最好保持一个清洁的工作区域。稍后会介绍几个绕过这种问题的办法（分别叫做                           stashing 和 commit amending）。目前已经提交了所有的修改，所以接下来可以正常转换到                           master 分支：</text><inline-styles><font-family><from>0</from><to>249</to><value>SimSun</value></font-family><font-size><from>0</from><to>249</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3511-1540200666353</coId><text>$ git checkout master</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9539-1540200666354</coId><text>Switched to branch "master"此时工作目录中的内容和你在解决问题                           #53 之前一模一样，你可以集中精力进行紧急修补。这一点值得牢记：Git 会把工作目录的内容恢复为检出某分支时它所指向的那个提交对象的快照。它会自动添加、删除和修改文件以确保目录的内容和你当时提交时完全一样。</text><inline-styles><font-family><from>0</from><to>175</to><value>SimSun</value></font-family><font-size><from>0</from><to>175</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3838-1540200666355</coId><text>接下来，你得进行紧急修补。我们创建一个紧急修补分支 hotfix 来开展工作，直到搞定（见图                           3-13）：</text><inline-styles><font-family><from>0</from><to>79</to><value>SimSun</value></font-family><font-size><from>0</from><to>79</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8962-1540200666356</coId><text>$ git checkout -b 'hotfix'</text><inline-styles><font-family><from>0</from><to>26</to><value>SimSun</value></font-family><font-size><from>0</from><to>26</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1689-1540200666356</coId><text>Switched to a new branch "hotfix"</text><inline-styles><font-family><from>0</from><to>33</to><value>SimSun</value></font-family><font-size><from>0</from><to>33</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1446-1540200666357</coId><text>$ vim index.html</text><inline-styles><font-family><from>0</from><to>16</to><value>SimSun</value></font-family><font-size><from>0</from><to>16</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4240-1540200666357</coId><text>$ git commit -a -m 'fixed the broken                           email address'</text><inline-styles><font-family><from>0</from><to>77</to><value>SimSun</value></font-family><font-size><from>0</from><to>77</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5699-1540200666358</coId><text>[hotfix]: created 3a0874c: "fixed                           the broken email address"</text><inline-styles><font-family><from>0</from><to>85</to><value>SimSun</value></font-family><font-size><from>0</from><to>85</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4120-1540200666364</coId><text>1 files changed, 0 insertions(+), 1                           deletions(-)</text><inline-styles><font-family><from>0</from><to>74</to><value>SimSun</value></font-family><font-size><from>0</from><to>74</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>4552-1540200666364</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>311</width></styles></image><para><coId>1677-1540200666365</coId><text>图 3-13. hotfix 分支是从 master 分支所在点分化出来的</text><inline-styles><font-family><from>0</from><to>37</to><value>SimSun</value></font-family><font-size><from>0</from><to>37</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1648-1540200666365</coId><text>有必要作些测试，确保修补是成功的，然后回到 master 分支并把它合并进来，然后发布到生产服务器。用                           git merge 命令来进行合并：</text><inline-styles><font-family><from>0</from><to>96</to><value>SimSun</value></font-family><font-size><from>0</from><to>96</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5143-1540200666365</coId><text>$ git checkout master</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9500-1540200666365</coId><text>$ git merge hotfix</text><inline-styles><font-family><from>0</from><to>18</to><value>SimSun</value></font-family><font-size><from>0</from><to>18</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4541-1540200666366</coId><text>Updating f42c576..3a0874c</text><inline-styles><font-family><from>0</from><to>25</to><value>SimSun</value></font-family><font-size><from>0</from><to>25</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7455-1540200666366</coId><text>Fast forward</text><inline-styles><font-family><from>0</from><to>12</to><value>SimSun</value></font-family><font-size><from>0</from><to>12</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4059-1540200666366</coId><text>README | 1 -</text><inline-styles><font-family><from>0</from><to>12</to><value>SimSun</value></font-family><font-size><from>0</from><to>12</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9760-1540200666366</coId><text>1 files changed, 0 insertions(+), 1                           deletions(-)请注意，合并时出现了“Fast forward”的提示。由于当前 master 分支所在的提交对象是要并入的 hotfix 分支的直接上游，Git 只需把 master 分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么                           Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast                           forward）。</text><inline-styles><font-family><from>0</from><to>326</to><value>SimSun</value></font-family><font-size><from>0</from><to>326</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1255-1540200666368</coId><text>现在最新的修改已经在当前 master 分支所指向的提交对象中了，可以部署到生产服务器上去了（见图                           3-14）。</text><inline-styles><font-family><from>0</from><to>82</to><value>SimSun</value></font-family><font-size><from>0</from><to>82</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>8127-1540200666368</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>310</width></styles></image><para><coId>7657-1540200666368</coId><text>图 3-14. 合并之后，master 分支和 hotfix 分支指向同一位置。</text><inline-styles><font-family><from>0</from><to>40</to><value>SimSun</value></font-family><font-size><from>0</from><to>40</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5545-1540200666368</coId><text>在那个超级重要的修补发布以后，你想要回到被打扰之前的工作。由于当前 hotfix                           分支和 master 都指向相同的提交对象，所以 hotfix 已经完成了历史使命，可以删掉了。使用 git                           branch 的 -d 选项执行删除操作：</text><inline-styles><font-family><from>0</from><to>169</to><value>SimSun</value></font-family><font-size><from>0</from><to>169</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1457-1540200666369</coId><text>$ git branch -d hotfix</text><inline-styles><font-family><from>0</from><to>22</to><value>SimSun</value></font-family><font-size><from>0</from><to>22</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1527-1540200666369</coId><text>Deleted branch hotfix (3a0874c).现在回到之前未完成的                           #53 问题修复分支上继续工作（图 3-15）：</text><inline-styles><font-family><from>0</from><to>93</to><value>SimSun</value></font-family><font-size><from>0</from><to>93</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9487-1540200666371</coId><text>$ git checkout iss53</text><inline-styles><font-family><from>0</from><to>20</to><value>SimSun</value></font-family><font-size><from>0</from><to>20</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6894-1540200666371</coId><text>Switched to branch "iss53"</text><inline-styles><font-family><from>0</from><to>26</to><value>SimSun</value></font-family><font-size><from>0</from><to>26</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2098-1540200666372</coId><text>$ vim index.html</text><inline-styles><font-family><from>0</from><to>16</to><value>SimSun</value></font-family><font-size><from>0</from><to>16</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2853-1540200666372</coId><text>$ git commit -a -m 'finished the new                           footer [issue 53]'</text><inline-styles><font-family><from>0</from><to>81</to><value>SimSun</value></font-family><font-size><from>0</from><to>81</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8220-1540200666372</coId><text>[iss53]: created ad82d7a: "finished                           the new footer [issue 53]"</text><inline-styles><font-family><from>0</from><to>88</to><value>SimSun</value></font-family><font-size><from>0</from><to>88</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4520-1540200666373</coId><text>1 files changed, 1 insertions(+), 0                           deletions(-)</text><inline-styles><font-family><from>0</from><to>74</to><value>SimSun</value></font-family><font-size><from>0</from><to>74</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>8040-1540200666373</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>388</width></styles></image><para><coId>1461-1540200666373</coId><text>图 3-15. iss53 分支可以不受影响继续推进。</text><inline-styles><font-family><from>0</from><to>27</to><value>SimSun</value></font-family><font-size><from>0</from><to>27</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1050-1540200666373</coId><text>不用担心之前 hotfix 分支的修改内容尚未包含到 iss53 中来。如果确实需要纳入此次修补，可以用                           git merge master 把 master 分支合并到 iss53；或者等 iss53 完成之后，再将                           iss53 分支中的更新并入 master。</text><inline-styles><font-family><from>0</from><to>183</to><value>SimSun</value></font-family><font-size><from>0</from><to>183</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4020-1540200666374</coId><text>分支的合并</text><inline-styles><font-family><from>0</from><to>5</to><value>SimSun</value></font-family><font-size><from>0</from><to>5</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6956-1540200666375</coId><text>在问题 #53 相关的工作完成之后，可以合并回 master 分支。实际操作同前面合并                           hotfix 分支差不多，只需回到 master 分支，运行 git merge 命令指定要合并进来的分支：</text><inline-styles><font-family><from>0</from><to>124</to><value>SimSun</value></font-family><font-size><from>0</from><to>124</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2540-1540200666376</coId><text>$ git checkout master</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2428-1540200666376</coId><text>$ git merge iss53</text><inline-styles><font-family><from>0</from><to>17</to><value>SimSun</value></font-family><font-size><from>0</from><to>17</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6544-1540200666376</coId><text>Merge made by recursive.</text><inline-styles><font-family><from>0</from><to>24</to><value>SimSun</value></font-family><font-size><from>0</from><to>24</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7499-1540200666376</coId><text>README | 1 +</text><inline-styles><font-family><from>0</from><to>12</to><value>SimSun</value></font-family><font-size><from>0</from><to>12</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1240-1540200666377</coId><text>1 files changed, 1 insertions(+), 0                           deletions(-)请注意，这次合并操作的底层实现，并不同于之前 hotfix 的并入方式。因为这次你的开发历史是从更早的地方开始分叉的。由于当前                           master 分支所指向的提交对象（C4）并不是 iss53 分支的直接祖先，Git 不得不进行一些额外处理。就此例而言，Git                           会用两个分支的末端（C4 和 C5）以及它们的共同祖先（C2）进行一次简单的三方合并计算。图 3-16                           用红框标出了 Git 用于合并的三个提交对象：</text><inline-styles><font-family><from>0</from><to>356</to><value>SimSun</value></font-family><font-size><from>0</from><to>356</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>6461-1540200666378</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>1020-1540200666378</coId><text>图 3-16. Git 为分支合并自动识别出最佳的同源合并点。</text><inline-styles><font-family><from>0</from><to>31</to><value>SimSun</value></font-family><font-size><from>0</from><to>31</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3640-1540200666378</coId><text>这次，Git 没有简单地把分支指针右移，而是对三方合并后的结果重新做一个新的快照，并自动创建一个指向它的提交对象（C6）（见图              3-17）。这个提交对象比较特殊，它有两个祖先（C4 和 C5）。</text><inline-styles><font-family><from>0</from><to>110</to><value>SimSun</value></font-family><font-size><from>0</from><to>110</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7000-1540200666378</coId><text>值得一提的是 Git 可以自己裁决哪个共同祖先才是最佳合并基础；这和 CVS                           或 Subversion（1.5 以后的版本）不同，它们需要开发者手工指定合并基础。所以此特性让 Git                           的合并操作比其他系统都要简单不少。</text><inline-styles><font-family><from>0</from><to>161</to><value>SimSun</value></font-family><font-size><from>0</from><to>161</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>8334-1540200666379</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>441</width></styles></image><para><coId>8779-1540200666380</coId><text>图 3-17. Git 自动创建了一个包含了合并结果的提交对象。</text><inline-styles><font-family><from>0</from><to>32</to><value>SimSun</value></font-family><font-size><from>0</from><to>32</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5954-1540200666380</coId><text>既然之前的工作成果已经合并到 master 了，那么 iss53 也就没用了。你可以就此删除它，并在问题追踪系统里关闭该问题。</text><inline-styles><font-family><from>0</from><to>63</to><value>SimSun</value></font-family><font-size><from>0</from><to>63</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7491-1540200666381</coId><text>$ git branch -d iss53遇到冲突时的分支合并</text><inline-styles><font-family><from>0</from><to>31</to><value>SimSun</value></font-family><font-size><from>0</from><to>31</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4050-1540200666381</coId><text>                          有时候合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决。）。如果你在解决问题                           #53 的过程中修改了 hotfix 中修改的部分，将得到类似下面的结果：</text><inline-styles><font-family><from>0</from><to>177</to><value>SimSun</value></font-family><font-size><from>0</from><to>177</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7289-1540200666382</coId><text>$ git merge iss53</text><inline-styles><font-family><from>0</from><to>17</to><value>SimSun</value></font-family><font-size><from>0</from><to>17</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6910-1540200666382</coId><text> Auto-merging index.html</text><inline-styles><font-family><from>0</from><to>24</to><value>SimSun</value></font-family><font-size><from>0</from><to>24</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2600-1540200666382</coId><text>CONFLICT (content): Merge conflict in                           index.html</text><inline-styles><font-family><from>0</from><to>74</to><value>SimSun</value></font-family><font-size><from>0</from><to>74</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8751-1540200666382</coId><text>Automatic merge failed; fix conflicts                           and then commit the result.Git 作了合并，但没有提交，它会停下来等你解决冲突。要看看哪些文件在合并时发生冲突，可以用                           git status 查阅：</text><inline-styles><font-family><from>0</from><to>178</to><value>SimSun</value></font-family><font-size><from>0</from><to>178</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5545-1540200666383</coId><text>[master*]$ git status</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5418-1540200666383</coId><text>index.html: needs merge</text><inline-styles><font-family><from>0</from><to>23</to><value>SimSun</value></font-family><font-size><from>0</from><to>23</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6176-1540200666383</coId><text># On branch master</text><inline-styles><font-family><from>0</from><to>18</to><value>SimSun</value></font-family><font-size><from>0</from><to>18</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8285-1540200666383</coId><text># Changed but not updated:</text><inline-styles><font-family><from>0</from><to>26</to><value>SimSun</value></font-family><font-size><from>0</from><to>26</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2230-1540200666384</coId><text># (use "git add &lt;file&gt;..."                           to update what will be committed)</text><inline-styles><font-family><from>0</from><to>86</to><value>SimSun</value></font-family><font-size><from>0</from><to>86</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4473-1540200666384</coId><text># (use "git checkout -- &lt;file&gt;..."                           to discard changes in working directory)</text><inline-styles><font-family><from>0</from><to>101</to><value>SimSun</value></font-family><font-size><from>0</from><to>101</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9453-1540200666384</coId><text>#</text><inline-styles><font-family><from>0</from><to>1</to><value>SimSun</value></font-family><font-size><from>0</from><to>1</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3038-1540200666384</coId><text># unmerged: index.html</text><inline-styles><font-family><from>0</from><to>22</to><value>SimSun</value></font-family><font-size><from>0</from><to>22</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9032-1540200666385</coId><text>#任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。Git                           会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。可以看到此文件包含类似下面这样的部分：</text><inline-styles><font-family><from>0</from><to>124</to><value>SimSun</value></font-family><font-size><from>0</from><to>124</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6427-1540200666385</coId><text>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html</text><inline-styles><font-family><from>0</from><to>23</to><value>SimSun</value></font-family><font-size><from>0</from><to>23</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4680-1540200666385</coId><text>&lt;div id="footer"&gt;contact                           : email.support@github.com&lt;/div&gt;</text><inline-styles><font-family><from>0</from><to>83</to><value>SimSun</value></font-family><font-size><from>0</from><to>83</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>0053-1540200666386</coId><text>=======</text><inline-styles><font-family><from>0</from><to>7</to><value>SimSun</value></font-family><font-size><from>0</from><to>7</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7055-1540200666386</coId><text>&lt;div id="footer"&gt;</text><inline-styles><font-family><from>0</from><to>17</to><value>SimSun</value></font-family><font-size><from>0</from><to>17</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7950-1540200666386</coId><text>please contact us at support@github.com</text><inline-styles><font-family><from>0</from><to>39</to><value>SimSun</value></font-family><font-size><from>0</from><to>39</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2817-1540200666386</coId><text>&lt;/div&gt;</text><inline-styles><font-family><from>0</from><to>6</to><value>SimSun</value></font-family><font-size><from>0</from><to>6</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5546-1540200666386</coId><text>&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html可以看到                           ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行 merge 命令时所切换到的分支）中的内容，下半部分是在                           iss53 分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。比如你可以通过把这段内容替换为下面这样来解决：</text><inline-styles><font-family><from>0</from><to>212</to><value>SimSun</value></font-family><font-size><from>0</from><to>212</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1775-1540200666387</coId><text>&lt;div id="footer"&gt;</text><inline-styles><font-family><from>0</from><to>17</to><value>SimSun</value></font-family><font-size><from>0</from><to>17</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9477-1540200666387</coId><text>please contact us at email.support@github.com</text><inline-styles><font-family><from>0</from><to>45</to><value>SimSun</value></font-family><font-size><from>0</from><to>45</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6046-1540200666388</coId><text>&lt;/div&gt;这个解决方案各采纳了两个分支中的一部分内容，而且我还删除了                           &lt;&lt;&lt;&lt;&lt;&lt;&lt;，======= 和 &gt;&gt;&gt;&gt;&gt;&gt;&gt;                这些行。在解决了所有文件里的所有冲突后，运行 git add 将把它们标记为已解决状态（译注：实际上就是来一次快照保存到暂存区域。）。因为一旦暂存，就表示冲突已经解决。如果你想用一个有图形界面的工具来解决这些问题，不妨运行                           git mergetool，它会调用一个可视化的合并工具并引导你解决所有冲突：</text><inline-styles><font-family><from>0</from><to>280</to><value>SimSun</value></font-family><font-size><from>0</from><to>280</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6055-1540200666388</coId><text>$ git mergetool</text><inline-styles><font-family><from>0</from><to>15</to><value>SimSun</value></font-family><font-size><from>0</from><to>15</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6414-1540200666389</coId><text>merge tool candidates: kdiff3 tkdiff                           xxdiff meld gvimdiff opendiff emerge vimdiff</text><inline-styles><font-family><from>0</from><to>107</to><value>SimSun</value></font-family><font-size><from>0</from><to>107</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6263-1540200666389</coId><text>Merging the files: index.html</text><inline-styles><font-family><from>0</from><to>29</to><value>SimSun</value></font-family><font-size><from>0</from><to>29</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5857-1540200666389</coId><text>Normal merge conflict for 'index.html':</text><inline-styles><font-family><from>0</from><to>39</to><value>SimSun</value></font-family><font-size><from>0</from><to>39</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1333-1540200666389</coId><text>{local}: modified</text><inline-styles><font-family><from>0</from><to>17</to><value>SimSun</value></font-family><font-size><from>0</from><to>17</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3581-1540200666390</coId><text>{remote}: modified</text><inline-styles><font-family><from>0</from><to>18</to><value>SimSun</value></font-family><font-size><from>0</from><to>18</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6563-1540200666390</coId><text>Hit return to start merge resolution                           tool (opendiff):如果不想用默认的合并工具（Git 为我默认选择了 opendiff，因为我在                           Mac 上运行了该命令），你可以在上方”merge tool candidates”里找到可用的合并工具列表，输入你想用的工具名。我们将在第七章讨论怎样改变环境中的默认值。</text><inline-styles><font-family><from>0</from><to>230</to><value>SimSun</value></font-family><font-size><from>0</from><to>230</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9481-1540200666390</coId><text>退出合并工具以后，Git 会询问你合并是否成功。如果回答是，它会为你把相关文件暂存起来，以表明状态为已解决。</text><inline-styles><font-family><from>0</from><to>54</to><value>SimSun</value></font-family><font-size><from>0</from><to>54</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1590-1540200666391</coId><text>再运行一次 git status 来确认所有冲突都已解决：</text><inline-styles><font-family><from>0</from><to>29</to><value>SimSun</value></font-family><font-size><from>0</from><to>29</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1825-1540200666391</coId><text>$ git status</text><inline-styles><font-family><from>0</from><to>12</to><value>SimSun</value></font-family><font-size><from>0</from><to>12</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8040-1540200666391</coId><text># On branch master</text><inline-styles><font-family><from>0</from><to>18</to><value>SimSun</value></font-family><font-size><from>0</from><to>18</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1981-1540200666391</coId><text># Changes to be committed:</text><inline-styles><font-family><from>0</from><to>26</to><value>SimSun</value></font-family><font-size><from>0</from><to>26</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6482-1540200666391</coId><text># (use "git reset HEAD &lt;file&gt;..."                           to unstage)</text><inline-styles><font-family><from>0</from><to>71</to><value>SimSun</value></font-family><font-size><from>0</from><to>71</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6610-1540200666392</coId><text>#</text><inline-styles><font-family><from>0</from><to>1</to><value>SimSun</value></font-family><font-size><from>0</from><to>1</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1682-1540200666393</coId><text># modified: index.html</text><inline-styles><font-family><from>0</from><to>22</to><value>SimSun</value></font-family><font-size><from>0</from><to>22</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7783-1540200666393</coId><text>#如果觉得满意了，并且确认所有冲突都已解决，也就是进入了暂存区，就可以用                           git commit 来完成这次合并提交。提交的记录差不多是这样：</text><inline-styles><font-family><from>0</from><to>96</to><value>SimSun</value></font-family><font-size><from>0</from><to>96</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3090-1540200666393</coId><text>Merge branch 'iss53'</text><inline-styles><font-family><from>0</from><to>20</to><value>SimSun</value></font-family><font-size><from>0</from><to>20</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1314-1540200666393</coId><text>Conflicts:</text><inline-styles><font-family><from>0</from><to>10</to><value>SimSun</value></font-family><font-size><from>0</from><to>10</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5385-1540200666394</coId><text>index.html</text><inline-styles><font-family><from>0</from><to>10</to><value>SimSun</value></font-family><font-size><from>0</from><to>10</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8418-1540200666394</coId><text>#</text><inline-styles><font-family><from>0</from><to>1</to><value>SimSun</value></font-family><font-size><from>0</from><to>1</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6680-1540200666394</coId><text># It looks like you may be committing                           a MERGE.</text><inline-styles><font-family><from>0</from><to>72</to><value>SimSun</value></font-family><font-size><from>0</from><to>72</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3350-1540200666394</coId><text># If this is not correct, please remove                           the file</text><inline-styles><font-family><from>0</from><to>74</to><value>SimSun</value></font-family><font-size><from>0</from><to>74</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5158-1540200666395</coId><text># .git/MERGE_HEAD</text><inline-styles><font-family><from>0</from><to>17</to><value>SimSun</value></font-family><font-size><from>0</from><to>17</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5079-1540200666395</coId><text># and try again.</text><inline-styles><font-family><from>0</from><to>16</to><value>SimSun</value></font-family><font-size><from>0</from><to>16</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8370-1540200666395</coId><text>#如果想给将来看这次合并的人一些方便，可以修改该信息，提供更多合并细节。比如你都作了哪些改动，以及这么做的原因。有时候裁决冲突的理由并不直接或明显，有必要略加注解。</text><inline-styles><font-family><from>0</from><to>82</to><value>SimSun</value></font-family><font-size><from>0</from><to>82</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5181-1540200666395</coId><text>分支的管理</text><inline-styles><bold><from>0</from><to>5</to><value>true</value></bold><font-family><from>0</from><to>5</to><value>SimSun</value></font-family><font-size><from>0</from><to>5</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9027-1540200666396</coId><text>                        </text><inline-styles/><styles/></para><para><coId>9526-1540200666396</coId><text>到目前为止，你已经学会了如何创建、合并和删除分支。除此之外，我们还需要学习如何管理分支，在日后的常规工作中会经常用到下面介绍的管理命令。</text><inline-styles><font-family><from>0</from><to>68</to><value>SimSun</value></font-family><font-size><from>0</from><to>68</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1612-1540200666396</coId><text>git branch 命令不仅仅能创建和删除分支，如果不加任何参数，它会给出当前所有分支的清单：</text><inline-styles><font-family><from>0</from><to>48</to><value>SimSun</value></font-family><font-size><from>0</from><to>48</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4467-1540200666396</coId><text>$ git branch</text><inline-styles><font-family><from>0</from><to>12</to><value>SimSun</value></font-family><font-size><from>0</from><to>12</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7599-1540200666396</coId><text>iss53</text><inline-styles><font-family><from>0</from><to>5</to><value>SimSun</value></font-family><font-size><from>0</from><to>5</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3071-1540200666397</coId><text>* master</text><inline-styles><font-family><from>0</from><to>8</to><value>SimSun</value></font-family><font-size><from>0</from><to>8</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8247-1540200666397</coId><text>testing注意看 master 分支前的 * 字符：它表示当前所在的分支。也就是说，如果现在提交更新，master                           分支将随着开发进度前移。若要查看各个分支最后一个提交对象的信息，运行 git branch -v：</text><inline-styles><font-family><from>0</from><to>135</to><value>SimSun</value></font-family><font-size><from>0</from><to>135</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1279-1540200666397</coId><text>$ git branch -v</text><inline-styles><font-family><from>0</from><to>15</to><value>SimSun</value></font-family><font-size><from>0</from><to>15</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3446-1540200666397</coId><text>iss53 93b412c fix javascript issue</text><inline-styles><font-family><from>0</from><to>34</to><value>SimSun</value></font-family><font-size><from>0</from><to>34</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8442-1540200666397</coId><text>* master 7a98805 Merge branch 'iss53'</text><inline-styles><font-family><from>0</from><to>37</to><value>SimSun</value></font-family><font-size><from>0</from><to>37</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3759-1540200666398</coId><text>testing 782fd34 add scott to the author                           list in the readmes要从该清单中筛选出你已经（或尚未）与当前分支合并的分支，可以用 --merge                           和 --no-merged 选项（Git 1.5.6 以上版本）。比如用 git branch --merge                     查看哪些分支已被并入当前分支（译注：也就是说哪些分支是当前分支的直接上游。）：</text><inline-styles><font-family><from>0</from><to>266</to><value>SimSun</value></font-family><font-size><from>0</from><to>266</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4044-1540200666398</coId><text>$ git branch --merged</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2834-1540200666399</coId><text>iss53</text><inline-styles><font-family><from>0</from><to>5</to><value>SimSun</value></font-family><font-size><from>0</from><to>5</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3219-1540200666399</coId><text>* master之前我们已经合并了 iss53，所以在这里会看到它。一般来说，列表中没有                           * 的分支通常都可以用 git branch -d 来删掉。原因很简单，既然已经把它们所包含的工作整合到了其他分支，删掉也不会损失什么。</text><inline-styles><font-family><from>0</from><to>139</to><value>SimSun</value></font-family><font-size><from>0</from><to>139</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4163-1540200666403</coId><text>另外可以用 git branch --no-merged 查看尚未合并的工作：</text><inline-styles><font-family><from>0</from><to>39</to><value>SimSun</value></font-family><font-size><from>0</from><to>39</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7563-1540200666403</coId><text>$ git branch --no-merged</text><inline-styles><font-family><from>0</from><to>24</to><value>SimSun</value></font-family><font-size><from>0</from><to>24</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5767-1540200666403</coId><text>testing它会显示还未合并进来的分支。由于这些分支中还包含着尚未合并进来的工作成果，所以简单地用                           git branch -d 删除该分支会提示错误，因为那样做会丢失数据：</text><inline-styles><font-family><from>0</from><to>113</to><value>SimSun</value></font-family><font-size><from>0</from><to>113</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2233-1540200666404</coId><text>$ git branch -d testing</text><inline-styles><font-family><from>0</from><to>23</to><value>SimSun</value></font-family><font-size><from>0</from><to>23</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2448-1540200666404</coId><text>error: The branch 'testing' is not an                           ancestor of your current HEAD.</text><inline-styles><font-family><from>0</from><to>94</to><value>SimSun</value></font-family><font-size><from>0</from><to>94</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3694-1540200666404</coId><text>If you are sure you want to delete it,                           run 'git branch -D testing'.不过，如果你确实想要删除该分支上的改动，可以用大写的删除选项                           -D 强制执行，就像上面提示信息中给出的那样。</text><inline-styles><font-family><from>0</from><to>173</to><value>SimSun</value></font-family><font-size><from>0</from><to>173</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5311-1540200666405</coId><text>利用分支进行开发的工作流程 </text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-family><from>0</from><to>14</to><value>SimSun</value></font-family><font-size><from>0</from><to>14</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9852-1540200666406</coId><text>                        </text><inline-styles/><styles/></para><para><coId>6832-1540200666405</coId><text>现在我们已经学会了新建分支和合并分支，可以（或应该）用它来做点什么呢？在本节，我们会介绍一些利用分支进行开发的工作流程。而正是由于分支管理的便捷，才衍生出了这类典型的工作模式，你可以根据项目的实际情况选择一种用用看。</text><inline-styles><font-family><from>0</from><to>108</to><value>SimSun</value></font-family><font-size><from>0</from><to>108</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9538-1540200666406</coId><text>长期分支</text><inline-styles><font-family><from>0</from><to>4</to><value>SimSun</value></font-family><font-size><from>0</from><to>4</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8570-1540200666406</coId><text>由于 Git 使用简单的三方合并，所以就算在较长一段时间内，反复多次把某个分支合并到另一分支，也不是什么难事。也就是说，你可以同时拥有多个开放的分支，每个分支用于完成特定的任务，随着开发的推进，你可以随时把某个特性分支的成果并到其他分支中。</text><inline-styles><font-family><from>0</from><to>120</to><value>SimSun</value></font-family><font-size><from>0</from><to>120</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8743-1540200666406</coId><text>许多使用 Git 的开发者都喜欢用这种方式来开展工作，比如仅在 master                           分支中保留完全稳定的代码，即已经发布或即将发布的代码。与此同时，他们还有一个名为 develop 或 next                           的平行分支，专门用于后续的开发，或仅用于稳定性测试 — 当然并不是说一定要绝对稳定，不过一旦进入某种稳定状态，便可以把它合并到                           master 里。这样，在确保这些已完成的特性分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多错误之后，就可以并到主干分支中，等待下一次的发布。</text><inline-styles><font-family><from>0</from><to>325</to><value>SimSun</value></font-family><font-size><from>0</from><to>325</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5093-1540200666408</coId><text>本质上我们刚才谈论的，是随着提交对象不断右移的指针。稳定分支的指针总是在提交历史中落后一大截，而前沿分支总是比较靠前（见图            3-18）。</text><inline-styles><font-family><from>0</from><to>79</to><value>SimSun</value></font-family><font-size><from>0</from><to>79</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>9074-1540200666409</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>8127-1540200666409</coId><text>图 3-18. 稳定分支总是比较老旧。</text><inline-styles><font-family><from>0</from><to>19</to><value>SimSun</value></font-family><font-size><from>0</from><to>19</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1680-1540200666409</coId><text>或者把它们想象成工作流水线，或许更好理解一些，经过测试的提交对象集合被遴选到更稳定的流水线（见图                           3-19）。</text><inline-styles><font-family><from>0</from><to>81</to><value>SimSun</value></font-family><font-size><from>0</from><to>81</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>9071-1540200666409</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>9048-1540200666410</coId><text>图 3-19. 想象成流水线可能会容易点。</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7061-1540200666410</coId><text>你可以用这招维护不同层次的稳定性。某些大项目还会有个 proposed（建议）或                           pu（proposed updates，建议更新）分支，它包含着那些可能还没有成熟到进入 next 或                           master 的内容。这么做的目的是拥有不同层次的稳定性：当这些分支进入到更稳定的水平时，再把它们合并到更高层分支中去。再次说明下，使用多个长期分支的做法并非必需，不过一般来说，对于特大型项目或特复杂的项目，这么做确实更容易管理。</text><inline-styles><font-family><from>0</from><to>260</to><value>SimSun</value></font-family><font-size><from>0</from><to>260</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9040-1540200666411</coId><text>特性分支</text><inline-styles><font-family><from>0</from><to>4</to><value>SimSun</value></font-family><font-size><from>0</from><to>4</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2218-1540200666411</coId><text>在任何规模的项目中都可以使用特性（Topic）分支。一个特性分支是指一个短期的，用来实现单一特性或与其相关工作的分支。可能你在以前的版本控制系统里从未做过类似这样的事情，因为通常创建与合并分支消耗太大。然而在                           Git 中，一天之内建立、使用、合并再删除多个分支是常见的事。</text><inline-styles><font-family><from>0</from><to>162</to><value>SimSun</value></font-family><font-size><from>0</from><to>162</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2845-1540200666411</coId><text>我们在上节的例子里已经见过这种用法了。我们创建了 iss53 和 hotfix                           这两个特性分支，在提交了若干更新后，把它们合并到主干分支，然后删除。该技术允许你迅速且完全的进行语境切换                           — 因为你的工作分散在不同的流水线里，每个分支里的改变都和它的目标特性相关，浏览代码之类的事情因而变得更简单了。你可以把作出的改变保持在特性分支中几分钟，几天甚至几个月，等它们成熟以后再合并，而不用在乎它们建立的顺序或者进度。</text><inline-styles><font-family><from>0</from><to>258</to><value>SimSun</value></font-family><font-size><from>0</from><to>258</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5677-1540200666412</coId><text>现在我们来看一个实际的例子。请看图 3-20，由下往上，起先我们在 master                           工作到 C1，然后开始一个新分支 iss91 尝试修复 91 号缺陷，提交到 C6 的时候，又冒出一个解决该问题的新办法，于是从之前                           C4 的地方又分出一个分支 iss91v2，干到 C8 的时候，又回到主干 master 中提交了 C9                           和 C10，再回到 iss91v2 继续工作，提交 C11，接着，又冒出个不太确定的想法，从 master                           的最新提交 C10 处开了个新的分支 dumbidea 做些试验。</text><inline-styles><font-family><from>0</from><to>352</to><value>SimSun</value></font-family><font-size><from>0</from><to>352</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>7814-1540200666413</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>428</width></styles></image><para><coId>1291-1540200666413</coId><text>图 3-20. 拥有多个特性分支的提交历史。</text><inline-styles><font-family><from>0</from><to>22</to><value>SimSun</value></font-family><font-size><from>0</from><to>22</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7692-1540200666414</coId><text>现在，假定两件事情：我们最终决定使用第二个解决方案，即 iss91v2                           中的办法；另外，我们把 dumbidea 分支拿给同事们看了以后，发现它竟然是个天才之作。所以接下来，我们准备抛弃原来的                           iss91 分支（实际上会丢弃 C5 和 C6），直接在主干中并入另外两个分支。最终的提交历史将变成图                           3-21 这样：</text><inline-styles><font-family><from>0</from><to>235</to><value>SimSun</value></font-family><font-size><from>0</from><to>235</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>8488-1540200666414</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>344</width></styles></image><para><coId>2435-1540200666415</coId><text>图 3-21. 合并了 dumbidea 和 iss91v2 后的分支历史。</text><inline-styles><font-family><from>0</from><to>38</to><value>SimSun</value></font-family><font-size><from>0</from><to>38</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9162-1540200666415</coId><text>请务必牢记这些分支全部都是本地分支，这一点很重要。当你在使用分支及合并的时候，一切都是在你自己的                           Git 仓库中进行的 — 完全不涉及与服务器的交互。</text><inline-styles><font-family><from>0</from><to>101</to><value>SimSun</value></font-family><font-size><from>0</from><to>101</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8061-1540200666415</coId><text>远程分支</text><inline-styles><bold><from>0</from><to>4</to><value>true</value></bold><font-family><from>0</from><to>4</to><value>SimSun</value></font-family><font-size><from>0</from><to>4</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1491-1540200666416</coId><text>                        </text><inline-styles/><styles/></para><para><coId>5552-1540200666416</coId><text>远程分支（remote branch）是对远程仓库中的分支的索引。它们是一些无法移动的本地分支；只有在                           Git 进行网络交互时才会更新。远程分支就像是书签，提醒着你上次连接远程仓库时上面各分支的位置。</text><inline-styles><font-family><from>0</from><to>126</to><value>SimSun</value></font-family><font-size><from>0</from><to>126</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9492-1540200666416</coId><text>我们用 (远程仓库名)/(分支名) 这样的形式表示远程分支。比如我们想看看上次同                           origin 仓库通讯时 master 的样子，就应该查看 origin/master 分支。如果你和同伴一起修复某个问题，但他们先推送了一个                           iss53 分支到远程仓库，虽然你可能也有一个本地的 iss53 分支，但指向服务器上最新更新的却应该是                           origin/iss53 分支。</text><inline-styles><font-family><from>0</from><to>260</to><value>SimSun</value></font-family><font-size><from>0</from><to>260</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1889-1540200666417</coId><text>可能有点乱，我们不妨举例说明。假设你们团队有个地址为 git.ourcompany.com                           的 Git 服务器。如果你从这里克隆，Git 会自动为你将此远程仓库命名为 origin，并下载其中所有的数据，建立一个指向它的                           master 分支的指针，在本地命名为 origin/master，但你无法在本地更改其数据。接着，Git                           建立一个属于你自己的本地 master 分支，始于 origin 上 master 分支相同的位置，你可以就此开始工作（见图                           3-22）：</text><inline-styles><font-family><from>0</from><to>338</to><value>SimSun</value></font-family><font-size><from>0</from><to>338</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>1478-1540200666418</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>1423-1540200666418</coId><text>图 3-22. 一次 Git 克隆会建立你自己的本地分支 master                           和远程分支 origin/master，它们都指向 origin/master 分支的最后一次提交。</text><inline-styles><font-family><from>0</from><to>112</to><value>SimSun</value></font-family><font-size><from>0</from><to>112</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1862-1540200666419</coId><text>如果你在本地 master 分支做了些改动，与此同时，其他人向 git.ourcompany.com                           推送了他们的更新，那么服务器上的 master 分支就会向前推进，而于此同时，你在本地的提交历史正朝向不同方向发展。不过只要你不和服务器通讯，你的                           origin/master 指针仍然保持原位不会移动（见图 3-23）。</text><inline-styles><font-family><from>0</from><to>213</to><value>SimSun</value></font-family><font-size><from>0</from><to>213</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>3048-1540200666419</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>4314-1540200666420</coId><text>图 3-23. 在本地工作的同时有人向远程仓库推送内容会让提交历史开始分流。</text><inline-styles><font-family><from>0</from><to>38</to><value>SimSun</value></font-family><font-size><from>0</from><to>38</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3250-1540200666420</coId><text>可以运行 git fetch origin 来同步远程服务器上的数据到本地。该命令首先找到                           origin 是哪个服务器（本例为 git.ourcompany.com），从上面获取你尚未拥有的数据，更新你本地的数据库，然后把                           origin/master 的指针移到它最新的位置上（见图 3-24）。</text><inline-styles><font-family><from>0</from><to>200</to><value>SimSun</value></font-family><font-size><from>0</from><to>200</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>7087-1540200666421</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>4374-1540200666421</coId><text>图 3-24. git fetch 命令会更新 remote 索引。</text><inline-styles><font-family><from>0</from><to>34</to><value>SimSun</value></font-family><font-size><from>0</from><to>34</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9051-1540200666422</coId><text>为了演示拥有多个远程分支（在不同的远程服务器上）的项目是如何工作的，我们假设你还有另一个仅供你的敏捷开发小组使用的内部服务器          git.team1.ourcompany.com。可以用第二章中提到的 git remote add 命令把它加为当前项目的远程分支之一。我们把它命名为                          teamone，以便代替原始的 Git 地址（见图 3-25）。</text><inline-styles><font-family><from>0</from><to>206</to><value>SimSun</value></font-family><font-size><from>0</from><to>206</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>1300-1540200666423</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>1434-1540200666424</coId><text>图 3-25. 把另一个服务器加为远程仓库</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6138-1540200666424</coId><text>现在你可以用 git fetch teamone 来获取小组服务器上你还没有的数据了。由于当前该服务器上的内容是你                           origin 服务器上的子集，Git 不会下载任何数据，而只是简单地创建一个名为 teamone/master                           的分支，指向 teamone 服务器上 master 分支所在的提交对象 31b8e（见图 3-26）。</text><inline-styles><font-family><from>0</from><to>218</to><value>SimSun</value></font-family><font-size><from>0</from><to>218</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>2171-1540200666425</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>7250-1540200666425</coId><text>图 3-26. 你在本地有了一个指向 teamone 服务器上 master                           分支的索引。</text><inline-styles><font-family><from>0</from><to>71</to><value>SimSun</value></font-family><font-size><from>0</from><to>71</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7652-1540200666425</coId><text>推送本地分支</text><inline-styles><font-family><from>0</from><to>6</to><value>SimSun</value></font-family><font-size><from>0</from><to>6</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4463-1540200666425</coId><text>要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库。你的本地分支不会被自动同步到你引入的远程服务器上，除非你明确执行推送操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。</text><inline-styles><font-family><from>0</from><to>121</to><value>SimSun</value></font-family><font-size><from>0</from><to>121</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1965-1540200666426</coId><text>如果你有个叫 serverfix 的分支需要和他人一起开发，可以运行 git                           push (远程仓库名) (分支名)：</text><inline-styles><font-family><from>0</from><to>84</to><value>SimSun</value></font-family><font-size><from>0</from><to>84</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5553-1540200666426</coId><text>$ git push origin serverfix</text><inline-styles><font-family><from>0</from><to>27</to><value>SimSun</value></font-family><font-size><from>0</from><to>27</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8846-1540200666426</coId><text>Counting objects: 20, done.</text><inline-styles><font-family><from>0</from><to>27</to><value>SimSun</value></font-family><font-size><from>0</from><to>27</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6786-1540200666426</coId><text>Compressing objects: 100% (14/14), done.</text><inline-styles><font-family><from>0</from><to>40</to><value>SimSun</value></font-family><font-size><from>0</from><to>40</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3562-1540200666426</coId><text>Writing objects: 100% (15/15), 1.74                           KiB, done.</text><inline-styles><font-family><from>0</from><to>72</to><value>SimSun</value></font-family><font-size><from>0</from><to>72</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2740-1540200666427</coId><text>Total 15 (delta 5), reused 0 (delta                           0)</text><inline-styles><font-family><from>0</from><to>64</to><value>SimSun</value></font-family><font-size><from>0</from><to>64</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2310-1540200666427</coId><text>To git@github.com:schacon/simplegit.git</text><inline-styles><font-family><from>0</from><to>39</to><value>SimSun</value></font-family><font-size><from>0</from><to>39</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5229-1540200666427</coId><text>* [new branch] serverfix -&gt; serverfix这其实有点像条捷径。Git                           自动把 serverfix 分支名扩展为 refs/heads/serverfix:refs/heads/serverfix，意为“取出我在本地的                           serverfix 分支，推送到远程仓库的 serverfix 分支中去”。我们将在第九章进一步介绍 refs/heads/                           部分的细节，不过一般使用的时候都可以省略它。也可以运行 git push origin serverfix:serferfix                           来实现相同的效果，它的意思是“上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix          分支”。通过此语法，你可以把本地分支推送到某个命名不同的远程分支：若想把远程分支叫作 awesomebranch，可以用                           git push origin serverfix:awesomebranch 来推送数据。</text><inline-styles><font-family><from>0</from><to>556</to><value>SimSun</value></font-family><font-size><from>0</from><to>556</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3325-1540200666429</coId><text>接下来，当你的协作者再次从服务器上获取数据时，他们将得到一个新的远程分支                           origin/serverfix：</text><inline-styles><font-family><from>0</from><to>80</to><value>SimSun</value></font-family><font-size><from>0</from><to>80</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6833-1540200666429</coId><text>$ git fetch origin</text><inline-styles><font-family><from>0</from><to>18</to><value>SimSun</value></font-family><font-size><from>0</from><to>18</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6998-1540200666430</coId><text>remote: Counting objects: 20, done.</text><inline-styles><font-family><from>0</from><to>35</to><value>SimSun</value></font-family><font-size><from>0</from><to>35</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9580-1540200666430</coId><text>remote: Compressing objects: 100% (14/14),                           done.</text><inline-styles><font-family><from>0</from><to>74</to><value>SimSun</value></font-family><font-size><from>0</from><to>74</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1080-1540200666430</coId><text>remote: Total 15 (delta 5), reused 0                           (delta 0)</text><inline-styles><font-family><from>0</from><to>72</to><value>SimSun</value></font-family><font-size><from>0</from><to>72</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1610-1540200666430</coId><text>Unpacking objects: 100% (15/15), done.</text><inline-styles><font-family><from>0</from><to>38</to><value>SimSun</value></font-family><font-size><from>0</from><to>38</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>0091-1540200666431</coId><text>From git@github.com:schacon/simplegit</text><inline-styles><font-family><from>0</from><to>37</to><value>SimSun</value></font-family><font-size><from>0</from><to>37</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2520-1540200666431</coId><text>* [new branch] serverfix -&gt; origin/serverfix值得注意的是，在                           fetch 操作下载好新的远程分支之后，你仍然无法在本地编辑该远程仓库中的分支。换句话说，在本例中，你不会有一个新的                           serverfix 分支，有的只是一个你无法移动的 origin/serverfix 指针。</text><inline-styles><font-family><from>0</from><to>210</to><value>SimSun</value></font-family><font-size><from>0</from><to>210</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7223-1540200666432</coId><text>如果要把该内容合并到当前分支，可以运行 git merge origin/serverfix。如果想要一份自己的                           serverfix 来开发，可以在远程分支的基础上分化出一个新的分支来：</text><inline-styles><font-family><from>0</from><to>119</to><value>SimSun</value></font-family><font-size><from>0</from><to>119</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4930-1540200666432</coId><text>$ git checkout -b serverfix origin/serverfix</text><inline-styles><font-family><from>0</from><to>44</to><value>SimSun</value></font-family><font-size><from>0</from><to>44</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2041-1540200666432</coId><text>Branch serverfix set up to track remote                           branch refs/remotes/origin/serverfix.</text><inline-styles><font-family><from>0</from><to>103</to><value>SimSun</value></font-family><font-size><from>0</from><to>103</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6268-1540200666433</coId><text>Switched to a new branch "serverfix"这会切换到新建的                           serverfix 本地分支，其内容同远程分支 origin/serverfix 一致，这样你就可以在里面继续开发了。</text><inline-styles><font-family><from>0</from><to>130</to><value>SimSun</value></font-family><font-size><from>0</from><to>130</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4064-1540200666433</coId><text>跟踪远程分支</text><inline-styles><font-family><from>0</from><to>6</to><value>SimSun</value></font-family><font-size><from>0</from><to>6</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4332-1540200666434</coId><text>从远程分支 checkout 出来的本地分支，称为_跟踪分支(tracking                           branch)_。跟踪分支是一种和远程分支有直接联系的本地分支。在跟踪分支里输入 git push，Git                           会自行推断应该向哪个服务器的哪个分支推送数据。反过来，在这些分支里运行 git pull 会获取所有远程索引，并把它们的数据都合并到本地分支中来。</text><inline-styles><font-family><from>0</from><to>219</to><value>SimSun</value></font-family><font-size><from>0</from><to>219</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2472-1540200666434</coId><text>在克隆仓库时，Git 通常会自动创建一个名为 master 的分支来跟踪                           origin/master。这正是 git push 和 git pull 一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如                           origin 上除了 master 之外的其它分支。刚才我们已经看到了这样的一个例子：git checkout                           -b [分支名] [远程名]/[分支名]。如果你有 1.6.2 以上版本的 Git，还可以用 --track                           选项简化：</text><inline-styles><font-family><from>0</from><to>332</to><value>SimSun</value></font-family><font-size><from>0</from><to>332</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2066-1540200666435</coId><text>$ git checkout --track origin/serverfix</text><inline-styles><font-family><from>0</from><to>39</to><value>SimSun</value></font-family><font-size><from>0</from><to>39</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4615-1540200666435</coId><text>Branch serverfix set up to track remote                           branch refs/remotes/origin/serverfix.</text><inline-styles><font-family><from>0</from><to>103</to><value>SimSun</value></font-family><font-size><from>0</from><to>103</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3050-1540200666436</coId><text>Switched to a new branch "serverfix"要为本地分支设定不同于远程分支的名字，只需在前个版本的命令里换个名字：</text><inline-styles><font-family><from>0</from><to>71</to><value>SimSun</value></font-family><font-size><from>0</from><to>71</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7121-1540200666442</coId><text>$ git checkout -b sf origin/serverfix</text><inline-styles><font-family><from>0</from><to>37</to><value>SimSun</value></font-family><font-size><from>0</from><to>37</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8585-1540200666442</coId><text>Branch sf set up to track remote branch                           refs/remotes/origin/serverfix.</text><inline-styles><font-family><from>0</from><to>96</to><value>SimSun</value></font-family><font-size><from>0</from><to>96</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9045-1540200666442</coId><text>Switched to a new branch "sf"现在你的本地分支                           sf 会自动向 origin/serverfix 推送和抓取数据了。</text><inline-styles><font-family><from>0</from><to>98</to><value>SimSun</value></font-family><font-size><from>0</from><to>98</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4128-1540200666443</coId><text>删除远程分支</text><inline-styles><font-family><from>0</from><to>6</to><value>SimSun</value></font-family><font-size><from>0</from><to>6</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7731-1540200666443</coId><text>如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的 master                           分支（或任何其他存放稳定代码的地方），可以用这个非常无厘头的语法来删除它：git push [远程名]                           :[分支名]。如果想在服务器上删除 serverfix 分支，运行下面的命令：</text><inline-styles><font-family><from>0</from><to>184</to><value>SimSun</value></font-family><font-size><from>0</from><to>184</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7560-1540200666444</coId><text>$ git push origin :serverfix</text><inline-styles><font-family><from>0</from><to>28</to><value>SimSun</value></font-family><font-size><from>0</from><to>28</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1214-1540200666444</coId><text>To git@github.com:schacon/simplegit.git</text><inline-styles><font-family><from>0</from><to>39</to><value>SimSun</value></font-family><font-size><from>0</from><to>39</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7060-1540200666444</coId><text>- [deleted] serverfix咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的                           git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。</text><inline-styles><font-family><from>0</from><to>195</to><value>SimSun</value></font-family><font-size><from>0</from><to>195</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8777-1540200666445</coId><text>分支的衍合</text><inline-styles><bold><from>0</from><to>5</to><value>true</value></bold><font-family><from>0</from><to>5</to><value>SimSun</value></font-family><font-size><from>0</from><to>5</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4031-1540200666446</coId><text>                        </text><inline-styles/><styles/></para><para><coId>2678-1540200666445</coId><text>把一个分支整合到另一个分支的办法有两种：merge 和 rebase（译注：rebase                           的翻译暂定为“衍合”，大家知道就可以了。）。在本章我们会学习什么是衍合，如何使用衍合，为什么衍合操作如此富有魅力，以及我们应该在什么情况下使用衍合。</text><inline-styles><font-family><from>0</from><to>145</to><value>SimSun</value></font-family><font-size><from>0</from><to>145</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2560-1540200666446</coId><text>基本的衍合操作</text><inline-styles><font-family><from>0</from><to>7</to><value>SimSun</value></font-family><font-size><from>0</from><to>7</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9042-1540200666446</coId><text>请回顾之前有关合并的一节（见图 3-27），你会看到开发进程分叉到两个不同分支，又各自提交了更新。</text><inline-styles><font-family><from>0</from><to>49</to><value>SimSun</value></font-family><font-size><from>0</from><to>49</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>7638-1540200666446</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>310</width></styles></image><para><coId>5077-1540200666446</coId><text>图 3-27. 最初分叉的提交历史。</text><inline-styles><font-family><from>0</from><to>18</to><value>SimSun</value></font-family><font-size><from>0</from><to>18</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4121-1540200666447</coId><text>之前介绍过，最容易的整合分支的方法是 merge 命令，它会把两个分支最新的快照（C3                           和 C4）以及二者最新的共同祖先（C2）进行三方合并，合并的结果是产生一个新的提交对象（C5）。如图 3-28                           所示：</text><inline-styles><font-family><from>0</from><to>155</to><value>SimSun</value></font-family><font-size><from>0</from><to>155</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>5826-1540200666447</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>390</width></styles></image><para><coId>2098-1540200666447</coId><text>图 3-28. 通过合并一个分支来整合分叉了的历史。</text><inline-styles><font-family><from>0</from><to>26</to><value>SimSun</value></font-family><font-size><from>0</from><to>26</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2469-1540200666448</coId><text>其实，还有另外一个选择：你可以把在 C3 里产生的变化补丁在 C4 的基础上重新打一遍。在                           Git 里，这种操作叫做_衍合（rebase）_。有了 rebase 命令，就可以把在一个分支里提交的改变移到另一个分支里重放一遍。</text><inline-styles><font-family><from>0</from><to>138</to><value>SimSun</value></font-family><font-size><from>0</from><to>138</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3622-1540200666448</coId><text>在上面这个例子中，运行：</text><inline-styles><font-family><from>0</from><to>12</to><value>SimSun</value></font-family><font-size><from>0</from><to>12</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7697-1540200666448</coId><text>$ git checkout experiment</text><inline-styles><font-family><from>0</from><to>25</to><value>SimSun</value></font-family><font-size><from>0</from><to>25</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6960-1540200666448</coId><text>$ git rebase master</text><inline-styles><font-family><from>0</from><to>19</to><value>SimSun</value></font-family><font-size><from>0</from><to>19</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7452-1540200666449</coId><text>First, rewinding head to replay your                           work on top of it...</text><inline-styles><font-family><from>0</from><to>83</to><value>SimSun</value></font-family><font-size><from>0</from><to>83</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7074-1540200666449</coId><text>Applying: added staged command它的原理是回到两个分支最近的共同祖先，根据当前分支（也就是要进行衍合的分支                           experiment）后续的历次提交对象（这里只有一个 C3），生成一系列文件补丁，然后以基底分支（也就是主干分支                           master）最后一个提交对象（C4）为新的出发点，逐个应用之前准备好的补丁文件，最后会生成一个新的合并提交对象（C3’），从而改写                          experiment 的提交历史，使它成为 master 分支的直接下游，如图 3-29 所示：</text><inline-styles><font-family><from>0</from><to>318</to><value>SimSun</value></font-family><font-size><from>0</from><to>318</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>4810-1540200666450</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>390</width></styles></image><para><coId>2777-1540200666450</coId><text>图 3-29. 把 C3 里产生的改变到 C4 上重演一遍。</text><inline-styles><font-family><from>0</from><to>30</to><value>SimSun</value></font-family><font-size><from>0</from><to>30</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2863-1540200666450</coId><text>现在回到 master 分支，进行一次快进合并（见图 3-30）：</text><inline-styles><font-family><from>0</from><to>33</to><value>SimSun</value></font-family><font-size><from>0</from><to>33</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>2978-1540200666451</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>390</width></styles></image><para><coId>4772-1540200666451</coId><text>图 3-30. master 分支的快进。</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7083-1540200666452</coId><text>现在的 C3’ 对应的快照，其实和普通的三方合并，即上个例子中的 C5                           对应的快照内容一模一样了。虽然最后整合得到的结果没有任何区别，但衍合能产生一个更为整洁的提交历史。如果视察一个衍合过的分支的历史记录，看起来会更清楚：仿佛所有修改都是在一根线上先后进行的，尽管实际上它们原本是同时并行发生的。</text><inline-styles><font-family><from>0</from><to>174</to><value>SimSun</value></font-family><font-size><from>0</from><to>174</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9085-1540200666452</coId><text>一般我们使用衍合的目的，是想要得到一个能在远程分支上干净应用的补丁 —                           比如某些项目你不是维护者，但想帮点忙的话，最好用衍合：先在自己的一个分支里进行开发，当准备向主项目提交补丁的时候，根据最新的                           origin/master 进行一次衍合操作然后再提交，这样维护者就不需要做任何整合工作（译注：实际上是把解决分支补丁同最新主干代码之间冲突的责任，化转为由提交补丁的人来解决。），只需根据你提供的仓库地址作一次快进合并，或者直接采纳你提交的补丁。</text><inline-styles><font-family><from>0</from><to>274</to><value>SimSun</value></font-family><font-size><from>0</from><to>274</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7541-1540200666454</coId><text>请注意，合并结果中最后一次提交所指向的快照，无论是通过衍合，还是三方合并，都会得到相同的快照内容，只不过提交历史不同罢了。衍合是按照每行的修改次序重演一遍修改，而合并是把最终结果合在一起。</text><inline-styles><font-family><from>0</from><to>94</to><value>SimSun</value></font-family><font-size><from>0</from><to>94</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9541-1540200666454</coId><text>有趣的衍合</text><inline-styles><font-family><from>0</from><to>5</to><value>SimSun</value></font-family><font-size><from>0</from><to>5</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8667-1540200666455</coId><text>衍合也可以放到其他分支进行，并不一定非得根据分化之前的分支。以图 3-31                           的历史为例，我们为了给服务器端代码添加一些功能而创建了特性分支 server，然后提交 C3 和 C4。然后又从                           C3 的地方再增加一个 client 分支来对客户端代码进行一些相应修改，所以提交了 C8 和 C9。最后，又回到                           server 分支提交了 C10。</text><inline-styles><font-family><from>0</from><to>248</to><value>SimSun</value></font-family><font-size><from>0</from><to>248</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>6085-1540200666455</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>1229-1540200666456</coId><text>图 3-31. 从一个特性分支里再分出一个特性分支的历史。</text><inline-styles><font-family><from>0</from><to>29</to><value>SimSun</value></font-family><font-size><from>0</from><to>29</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7913-1540200666456</coId><text>假设在接下来的一次软件发布中，我们决定先把客户端的修改并到主线中，而暂缓并入服务端软件的修改（因为还需要进一步测试）。这个时候，我们就可以把基于                           server 分支而非 master 分支的改变（即 C8 和 C9），跳过 server 直接放到 master                      分支中重演一遍，但这需要用 git rebase 的 --onto 选项指定新的基底分支 master：</text><inline-styles><font-family><from>0</from><to>230</to><value>SimSun</value></font-family><font-size><from>0</from><to>230</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1758-1540200666457</coId><text>$ git rebase --onto master server client这好比在说：“取出                           client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在 master                           上重演一遍”。是不是有点复杂？不过它的结果如图 3-32 所示，非常酷（译注：虽然 client 里的                           C8, C9 在 C3 之后，但这仅表明时间上的先后，而非在 C3 修改的基础上进一步改动，因为 server       和 client 这两个分支对应的代码应该是两套文件，虽然这么说不是很严格，但应理解为在 C3 时间点之后，对另外的文件所做的                        C8，C9 修改，放到主干重演。）：</text><inline-styles><font-family><from>0</from><to>405</to><value>SimSun</value></font-family><font-size><from>0</from><to>405</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>5749-1540200666458</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>7782-1540200666459</coId><text>图 3-32. 将特性分支上的另一个特性分支衍合到其他分支。</text><inline-styles><font-family><from>0</from><to>30</to><value>SimSun</value></font-family><font-size><from>0</from><to>30</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9773-1540200666459</coId><text>现在可以快进 master 分支了（见图 3-33）：</text><inline-styles><font-family><from>0</from><to>27</to><value>SimSun</value></font-family><font-size><from>0</from><to>27</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>1451-1540200666459</coId><text>$ git checkout master</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9950-1540200666460</coId><text>$ git merge client</text><inline-styles><font-family><from>0</from><to>18</to><value>SimSun</value></font-family><font-size><from>0</from><to>18</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>7859-1540200666460</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>8350-1540200666461</coId><text>图 3-33. 快进 master 分支，使之包含 client 分支的变化。</text><inline-styles><font-family><from>0</from><to>39</to><value>SimSun</value></font-family><font-size><from>0</from><to>39</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5863-1540200666461</coId><text>现在我们决定把 server 分支的变化也包含进来。我们可以直接把 server                           分支衍合到 master，而不用手工切换到 server 分支后再执行衍合操作 — git rebase                           [主分支] [特性分支] 命令会先取出特性分支 server，然后在主分支 master 上重演：</text><inline-styles><font-family><from>0</from><to>195</to><value>SimSun</value></font-family><font-size><from>0</from><to>195</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9840-1540200666462</coId><text>$ git rebase master server于是，server                           的进度应用到 master 的基础上，如图 3-34 所示：</text><inline-styles><font-family><from>0</from><to>92</to><value>SimSun</value></font-family><font-size><from>0</from><to>92</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>1030-1540200666462</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>1788-1540200666463</coId><text>图 3-34. 在 master 分支上衍合 server 分支。</text><inline-styles><font-family><from>0</from><to>33</to><value>SimSun</value></font-family><font-size><from>0</from><to>33</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6061-1540200666463</coId><text>然后就可以快进主干分支 master 了：</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5556-1540200666463</coId><text>$ git checkout master</text><inline-styles><font-family><from>0</from><to>21</to><value>SimSun</value></font-family><font-size><from>0</from><to>21</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4747-1540200666463</coId><text>$ git merge server现在 client 和 server                           分支的变化都已经集成到主干分支来了，可以删掉它们了。最终我们的提交历史会变成图 3-35 的样子：</text><inline-styles><font-family><from>0</from><to>112</to><value>SimSun</value></font-family><font-size><from>0</from><to>112</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>3487-1540200666464</coId><text>$ git branch -d client</text><inline-styles><font-family><from>0</from><to>22</to><value>SimSun</value></font-family><font-size><from>0</from><to>22</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5911-1540200666464</coId><text>$ git branch -d server</text><inline-styles><font-family><from>0</from><to>22</to><value>SimSun</value></font-family><font-size><from>0</from><to>22</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>2261-1540200666464</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>1026-1540200666464</coId><text>图 3-35. 最终的提交历史</text><inline-styles><font-family><from>0</from><to>15</to><value>SimSun</value></font-family><font-size><from>0</from><to>15</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>4091-1540200666464</coId><text>衍合的风险</text><inline-styles><font-family><from>0</from><to>5</to><value>SimSun</value></font-family><font-size><from>0</from><to>5</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2810-1540200666465</coId><text>呃，奇妙的衍合也并非完美无缺，要用它得遵守一条准则：</text><inline-styles><font-family><from>0</from><to>26</to><value>SimSun</value></font-family><font-size><from>0</from><to>26</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6062-1540200666465</coId><text>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作。</text><inline-styles><font-family><from>0</from><to>34</to><value>SimSun</value></font-family><font-size><from>0</from><to>34</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9092-1540200666465</coId><text>如果你遵循这条金科玉律，就不会出差错。否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。</text><inline-styles><font-family><from>0</from><to>48</to><value>SimSun</value></font-family><font-size><from>0</from><to>48</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6360-1540200666465</coId><text>在进行衍合的时候，实际上抛弃了一些现存的提交对象而创造了一些类似但不同的新的提交对象。如果你把原来分支中的提交对象发布出去，并且其他人更新下载后在其基础上开展工作，而稍后你又用                           git rebase 抛弃这些提交对象，把新的重演后的提交对象发布出去的话，你的合作者就不得不重新合并他们的工作，这样当你再次从他们那里获取内容时，提交历史就会变得一团糟。</text><inline-styles><font-family><from>0</from><to>201</to><value>SimSun</value></font-family><font-size><from>0</from><to>201</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>7593-1540200666466</coId><text>下面我们用一个实际例子来说明为什么公开的衍合会带来问题。假设你从一个中央服务器克隆然后在它的基础上搞了一些开发，提交历史类似图        3-36 所示：</text><inline-styles><font-family><from>0</from><to>79</to><value>SimSun</value></font-family><font-size><from>0</from><to>79</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>5840-1540200666466</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>6031-1540200666466</coId><text>图 3-36. 克隆一个仓库，在其基础上工作一番。</text><inline-styles><font-family><from>0</from><to>25</to><value>SimSun</value></font-family><font-size><from>0</from><to>25</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>2651-1540200666467</coId><text>现在，某人在 C1 的基础上做了些改变，并合并他自己的分支得到结果 C6，推送到中央服务器。当你抓取并合并这些数据到你本地的开发分支中后，会得到合并结果                           C7，历史提交会变成图 3-37 这样：</text><inline-styles><font-family><from>0</from><to>123</to><value>SimSun</value></font-family><font-size><from>0</from><to>123</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>1050-1540200666467</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>4170-1540200666467</coId><text>图 3-37. 抓取他人提交，并入自己主干。</text><inline-styles><font-family><from>0</from><to>22</to><value>SimSun</value></font-family><font-size><from>0</from><to>22</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9320-1540200666467</coId><text>接下来，那个推送 C6 上来的人决定用衍合取代之前的合并操作；继而又用                           git push --force 覆盖了服务器上的历史，得到 C4’。而之后当你再从服务器上下载最新提交后，会得到：</text><inline-styles><font-family><from>0</from><to>120</to><value>SimSun</value></font-family><font-size><from>0</from><to>120</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>5369-1540200666468</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>5396-1540200666469</coId><text>图 3-38. 有人推送了衍合后得到的 C4’，丢弃了你作为开发基础的                           C4 和 C6。</text><inline-styles><font-family><from>0</from><to>70</to><value>SimSun</value></font-family><font-size><from>0</from><to>70</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>8342-1540200666469</coId><text>下载更新后需要合并，但此时衍合产生的提交对象 C4’ 的 SHA-1 校验值和之前                           C4 完全不同，所以 Git 会把它们当作新的提交对象处理，而实际上此刻你的提交历史 C7 中早已经包含了                           C4 的修改内容，于是合并操作会把 C7 和 C4’ 合并为 C8（见图 3-39）:</text><inline-styles><font-family><from>0</from><to>191</to><value>SimSun</value></font-family><font-size><from>0</from><to>191</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><image><coId>3380-1540200666470</coId><source>file:///C:/Users/king/AppData/Local/youdao/ynote/editor/web/undefined</source><text></text><styles><width>500</width></styles></image><para><coId>9489-1540200666470</coId><text>图 3-39. 你把相同的内容又合并了一遍，生成一个新的提交 C8。</text><inline-styles><font-family><from>0</from><to>34</to><value>SimSun</value></font-family><font-size><from>0</from><to>34</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>9862-1540200666470</coId><text>C8 这一步的合并是迟早会发生的，因为只有这样你才能和其他协作者提交的内容保持同步。而在                           C8 之后，你的提交历史里就会同时包含 C4 和 C4’，两者有着不同的 SHA-1 校验值，如果用 git                           log 查看历史，会看到两个提交拥有相同的作者日期与说明，令人费解。而更糟的是，当你把这样的历史推送到服务器后，会再次把这些衍合后的提交引入到中央服务器，进一步困扰其他人（译注：这个例子中，出问题的责任方是那个发布了                           C6 后又用衍合发布 C4’ 的人，其他人会因此反馈双重历史到共享主干，从而混淆大家的视听。）。</text><inline-styles><font-family><from>0</from><to>335</to><value>SimSun</value></font-family><font-size><from>0</from><to>335</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5848-1540200666471</coId><text>如果把衍合当成一种在推送之前清理提交历史的手段，而且仅仅衍合那些尚未公开的提交对象，就没问题。如果衍合那些已经公开的提交对象，并且已经有人基于这些提交对象开展了后续开发工作的话，就会出现叫人沮丧的麻烦。</text><inline-styles><font-family><from>0</from><to>101</to><value>SimSun</value></font-family><font-size><from>0</from><to>101</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>6416-1540200666472</coId><text>小结</text><inline-styles><bold><from>0</from><to>2</to><value>true</value></bold><font-family><from>0</from><to>2</to><value>SimSun</value></font-family><font-size><from>0</from><to>2</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para><para><coId>5682-1540200666473</coId><text>                        </text><inline-styles/><styles/></para><para><coId>7743-1540200666473</coId><text>读到这里，你应该已经学会了如何创建分支并切换到新分支，在不同分支间转换，合并本地分支，把分支推送到共享服务器上，使用共享分支与他人协作，以及在分享之前进行衍合。</text><inline-styles><font-family><from>0</from><to>80</to><value>SimSun</value></font-family><font-size><from>0</from><to>80</to><value>12</value></font-size></inline-styles><styles><text-indent>1</text-indent><line-height>1.6666666666666667</line-height></styles></para></body></note>                                </div>
                                <div class="mod-note-comment" style="display: none">
                                    <div class="note-comment-title"><h2>用户评论</h2></div>
                                    <div class="note-comment-body" id="note-comment-body">
                                        <div class="note-comment-empty" id="note-comment-empty">暂无评论。</div>  
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>